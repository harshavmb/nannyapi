definitions:
  agent.AgentInfo:
    properties:
      created_at:
        type: string
      hostname:
        type: string
      id:
        type: string
      ip_address:
        type: string
      kernel_version:
        type: string
      os_version:
        type: string
      user_id:
        type: string
    type: object
  chat.Chat:
    properties:
      agent_id:
        type: string
      created_at:
        type: string
      history:
        items:
          $ref: '#/definitions/chat.PromptResponse'
        type: array
      id:
        type: string
    type: object
  chat.PromptResponse:
    properties:
      prompt:
        type: string
      response:
        type: string
      type:
        description: '"commands" or "text"'
        type: string
    type: object
  server.AuthTokenData:
    properties:
      createdAt:
        type: string
      id:
        type: string
      maskedToken:
        type: string
    type: object
  server.chatRequest:
    properties:
      chat:
        type: string
      history:
        items:
          $ref: '#/definitions/server.content'
        type: array
    type: object
  server.content:
    properties:
      parts:
        items:
          $ref: '#/definitions/server.part'
        type: array
      role:
        type: string
    type: object
  server.part:
    properties:
      text:
        type: string
    type: object
info:
  contact:
    email: harsha@harshanu.space
    name: API Support
    url: https://nannyai.harshanu.space/support
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
paths:
  /api/agent-info/{id}:
    get:
      description: Retrieves agent information by ID
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved agent info
          schema:
            $ref: '#/definitions/agent.AgentInfo'
        "400":
          description: Invalid ID format
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "404":
          description: Agent info not found
          schema:
            type: string
        "500":
          description: Failed to retrieve agent info
          schema:
            type: string
      summary: Get agent info by ID
      tags:
      - agent-info
  /api/agent-infos:
    post:
      consumes:
      - application/json
      description: Ingest agent information
      parameters:
      - description: Agent Information
        in: body
        name: agentInfo
        required: true
        schema:
          $ref: '#/definitions/agent.AgentInfo'
      produces:
      - application/json
      responses:
        "201":
          description: id of the inserted agent info
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Failed to retrieve agents info
          schema:
            type: string
      summary: Ingest agent information
      tags:
      - agent-info
  /api/agents:
    get:
      consumes:
      - application/json
      description: Ingest agent information
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved agent info
          schema:
            items:
              $ref: '#/definitions/agent.AgentInfo'
            type: array
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Failed to retrieve agents info
          schema:
            type: string
      summary: Ingest agent information
      tags:
      - agent-info
  /api/auth-token/{id}:
    delete:
      description: Deletes a specific auth token by ID.
      parameters:
      - description: Token ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Auth token deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid token ID format or Token ID is required
          schema:
            type: string
        "500":
          description: Failed to delete auth token
          schema:
            type: string
      summary: Delete an auth token
      tags:
      - auth-tokens
  /api/auth-tokens:
    get:
      description: Retrieves all auth tokens for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved auth tokens
          schema:
            items:
              $ref: '#/definitions/server.AuthTokenData'
            type: array
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Failed to retrieve auth tokens
          schema:
            type: string
      summary: Get all auth tokens
      tags:
      - auth-tokens
  /api/chat:
    post:
      consumes:
      - application/json
      description: Starts a new chat session
      parameters:
      - description: Agent ID
        in: body
        name: agentID
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Chat session started successfully
          schema:
            $ref: '#/definitions/chat.Chat'
        "500":
          description: Failed to start chat session
          schema:
            type: string
      summary: Start a new chat session
      tags:
      - chat
  /api/chat/{id}:
    get:
      description: Retrieves a chat session by ID
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved chat session
          schema:
            $ref: '#/definitions/chat.Chat'
        "400":
          description: Invalid chat ID format
          schema:
            type: string
        "404":
          description: Chat session not found
          schema:
            type: string
        "500":
          description: Failed to retrieve chat session
          schema:
            type: string
      summary: Get a chat session by ID
      tags:
      - chat
    put:
      consumes:
      - application/json
      description: Adds a prompt-response pair to an existing chat session
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        required: true
        type: string
      - description: Prompt and Response
        in: body
        name: promptResponse
        required: true
        schema:
          $ref: '#/definitions/chat.PromptResponse'
      produces:
      - application/json
      responses:
        "200":
          description: Prompt-response pair added successfully
          schema:
            $ref: '#/definitions/chat.Chat'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Chat session not found
          schema:
            type: string
        "500":
          description: Failed to add prompt-response pair
          schema:
            type: string
      summary: Add a prompt-response pair to a chat session
      tags:
      - chat
  /api/refresh-token:
    post:
      consumes:
      - application/json
      description: Handle refresh token validation, creation and creation of accessTokens
        too
      parameters:
      - description: Refresh Token
        in: body
        name: refreshToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: refreshToken and accessToken
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Failed to create refresh token
          schema:
            type: string
      summary: Handle refresh token validation, creation and creation of accessTokens
        too
      tags:
      - refresh-token
  /api/user-auth-token:
    get:
      description: Fetch user info from auth token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Fetch user info from auth token
      tags:
      - auth-tokens
  /api/user/{param}:
    get:
      description: Fetch user info from id
      parameters:
      - description: ID of the user
        in: path
        name: param
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Fetch user info from id
      tags:
      - user-from-email
  /chat:
    post:
      consumes:
      - application/json
      description: Chat with the model
      parameters:
      - description: Chat request
        in: body
        name: chat
        required: true
        schema:
          $ref: '#/definitions/server.chatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Chat with the model
      tags:
      - chat
  /status:
    get:
      consumes:
      - application/json
      description: Status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Status of the API
      tags:
      - status
swagger: "2.0"
