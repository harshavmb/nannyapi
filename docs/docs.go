// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://nannyai.dev/support",
            "email": "harsha@harshanu.space"
        },
        "license": {
            "name": "GNU General Public License v3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/agent-info": {
            "post": {
                "description": "Creates or updates agent information with system metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agent-info"
                ],
                "summary": "Create agent information",
                "responses": {
                    "201": {
                        "description": "Successfully created agent info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing required fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to save agent info",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/agent-info/{id}": {
            "get": {
                "description": "Retrieves agent information for a specific agent ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agent-info"
                ],
                "summary": "Get specific agent info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Agent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved agent info",
                        "schema": {
                            "$ref": "#/definitions/agent.AgentInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format or Agent ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Agent info not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve agent info",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/agents": {
            "get": {
                "description": "Retrieves agent information by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agent-info"
                ],
                "summary": "Get agent info by ID",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved agent info",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/agent.AgentInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve agents info",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth-token": {
            "post": {
                "description": "Creates auth token (aka API key) for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth-token"
                ],
                "summary": "Creates auth token (aka API key) for the authenticated user",
                "responses": {
                    "201": {
                        "description": "id of the inserted token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create API key",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth-token/{id}": {
            "delete": {
                "description": "Deletes a specific auth token by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth-tokens"
                ],
                "summary": "Delete an auth token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Auth token deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token ID format or Token ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete auth token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/auth-tokens": {
            "get": {
                "description": "Retrieves all auth tokens for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth-tokens"
                ],
                "summary": "Get all auth tokens",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved auth tokens",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/token.Token"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve auth tokens",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/diagnostic": {
            "post": {
                "description": "Start a new Linux system diagnostic session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "diagnostic"
                ],
                "summary": "Start diagnostic session",
                "parameters": [
                    {
                        "description": "Start diagnostic request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/diagnostic.StartDiagnosticRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created diagnostic session",
                        "schema": {
                            "$ref": "#/definitions/diagnostic.DiagnosticSession"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing required fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "User not authorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/diagnostic/{id}": {
            "get": {
                "description": "Get details of a diagnostic session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "diagnostic"
                ],
                "summary": "Get diagnostic session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/diagnostic.DiagnosticSession"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a diagnostic session and its associated data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "diagnostic"
                ],
                "summary": "Delete a diagnostic session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "User not authorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/diagnostic/{id}/continue": {
            "post": {
                "description": "Continue an existing Linux system diagnostic session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "diagnostic"
                ],
                "summary": "Continue a diagnostic session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Continue diagnostic request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/diagnostic.ContinueDiagnosticRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "When diagnosis is completed",
                        "schema": {
                            "$ref": "#/definitions/diagnostic.DiagnosticSession"
                        }
                    },
                    "201": {
                        "description": "When diagnosis is still in progress",
                        "schema": {
                            "$ref": "#/definitions/diagnostic.DiagnosticSession"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/diagnostic/{id}/summary": {
            "get": {
                "description": "Get a summary of the diagnostic session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "diagnostic"
                ],
                "summary": "Get diagnostic summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Diagnostic summary",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/diagnostics": {
            "get": {
                "description": "List all diagnostic sessions for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "diagnostic"
                ],
                "summary": "List diagnostic sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/diagnostic.DiagnosticSession"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/refresh-token": {
            "post": {
                "description": "Handle refresh token validation, creation and creation of accessTokens too",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refresh-token"
                ],
                "summary": "Handle refresh token validation, creation and creation of accessTokens too",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "refreshToken",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "refreshToken and accessToken",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create refresh token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user-auth-token": {
            "get": {
                "description": "Fetch user info from auth token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth-tokens"
                ],
                "summary": "Fetch user info from auth token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/{id}": {
            "get": {
                "description": "Retrieves user information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user info",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format or User ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve user info",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Status of the API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "status"
                ],
                "summary": "Status of the API",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "agent.AgentInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "kernel_version": {
                    "type": "string"
                },
                "os_version": {
                    "type": "string"
                },
                "system_metrics": {
                    "$ref": "#/definitions/agent.SystemMetrics"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "agent.SystemMetrics": {
            "type": "object",
            "properties": {
                "cpu_info": {
                    "description": "CPU information from /proc/cpuinfo",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cpu_usage": {
                    "description": "Current CPU usage percentage",
                    "type": "number"
                },
                "disk_usage": {
                    "description": "Disk usage per mount point in bytes",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "fs_usage": {
                    "description": "Filesystem usage percentages",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "memory_free": {
                    "description": "Free memory in bytes",
                    "type": "integer"
                },
                "memory_total": {
                    "description": "Total memory in bytes",
                    "type": "integer"
                },
                "memory_used": {
                    "description": "Used memory in bytes",
                    "type": "integer"
                }
            }
        },
        "diagnostic.ContinueDiagnosticRequest": {
            "type": "object",
            "properties": {
                "diagnostic_output": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "system_metrics": {
                    "$ref": "#/definitions/agent.SystemMetrics"
                }
            }
        },
        "diagnostic.DiagnosticCommand": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "timeout_seconds": {
                    "type": "integer"
                }
            }
        },
        "diagnostic.DiagnosticResponse": {
            "type": "object",
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/diagnostic.DiagnosticCommand"
                    }
                },
                "diagnosis_type": {
                    "type": "string"
                },
                "impact": {
                    "type": "string"
                },
                "log_checks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/diagnostic.LogCheck"
                    }
                },
                "next_step": {
                    "type": "string"
                },
                "root_cause": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                },
                "system_snapshot": {
                    "$ref": "#/definitions/agent.SystemMetrics"
                }
            }
        },
        "diagnostic.DiagnosticSession": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "current_iteration": {
                    "type": "integer"
                },
                "history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/diagnostic.DiagnosticResponse"
                    }
                },
                "id": {
                    "type": "string"
                },
                "initial_issue": {
                    "type": "string"
                },
                "max_iterations": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "diagnostic.LogCheck": {
            "type": "object",
            "properties": {
                "grep_pattern": {
                    "type": "string"
                },
                "log_path": {
                    "type": "string"
                }
            }
        },
        "diagnostic.StartDiagnosticRequest": {
            "type": "object",
            "properties": {
                "agent_id": {
                    "type": "string"
                },
                "issue": {
                    "type": "string"
                }
            }
        },
        "token.Token": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "hashed_token": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "retrieved": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "html_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_logged_in": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
